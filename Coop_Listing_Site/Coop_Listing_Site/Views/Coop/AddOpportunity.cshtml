@model Coop_Listing_Site.Models.ViewModels.OpportunityModel

@{
    ViewBag.Title = "Add an Opportunity";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
    function compensationChange() {
        switch (this.value) {
            case "Paid":
                $("#Wage").show();
                $("#Amount").hide();
                break;
            case "Stipend":
                $("#Amount").show();
                $("#Wage").hide();
                break;
            case "UnPaid":
                $("#Wage").hide();
                $("#Amount").hide();
                break;
        }
    }

    $(document).ready(function () {
        $("#Paid").change(compensationChange);
        $("#Stipend").change(compensationChange);
        $("#UnPaid").change(compensationChange);
    });
</script>

<h2>Add Cooperative Opportunity</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h3>Cooperative  Opportunity</h3>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ContactName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ContactNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ContactEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactEmail, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyWebsite, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyWebsite, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyWebsite, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AboutCompany, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.AboutCompany, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AboutCompany, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AboutDepartment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.AboutDepartment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AboutDepartment, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CoopPositionTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CoopPositionTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CoopPositionTitle, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CoopPositionDuties, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.CoopPositionDuties, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CoopPositionDuties, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Qualifications, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Qualifications, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Qualifications, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.GPA, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GPA, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GPA, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" >
            @Html.LabelFor(model => model.Paid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" >
                Paid: @Html.RadioButton("Compensation", "Paid", new { id = "Paid" } )
                Stipend: @Html.RadioButton("Compensation", "Stipend", new { id = "Stipend" })
                UnPaid: @Html.RadioButton("Compensation", "UnPaid", new { id = "UnPaid" })
             </div>
        </div>
        <div class="form-group" style="display:none" id="Wage">
            @Html.LabelFor(model => model.Wage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Wage, new { htmlAttributes = new { @class = "form-control",  } })
            </div>
        </div>
        <div class="form-group" style="display:none" id="Amount">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.OpeningsAvailable, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OpeningsAvailable, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OpeningsAvailable, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TermAvailable, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TermAvailable, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TermAvailable, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DepartmentIDs", "Select One")
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Majors", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="Majors" on>
                    <option id="top-opt" value>Choose a Department first</option>
                </select>
                <button style="margin-left: 10px" type="button" class="btn" onclick="addSelectedMajor();">Add</button>
            </div>
        </div>

        <div class="form-group">
            @Html.Label(" ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <ol style="list-style-type: none; padding-left: 0px;">
                    @if (Model != null && Model.Majors.Count > 0)
                    {
                        foreach (var major in Model.Majors)
                        {
                            <div id="@major.MajorID">
                                <button type="button" onclick="removeMajor(@major.MajorID);">X</button> <li style="display:inline-block;" value="@major.MajorID">@major.MajorName</li>
                                <br />
                            </div>
                        }
                    }
                </ol>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="AddOpportunity" class="btn btn-primary" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to the opportunity list", "Index")@*can't seem to make this a button like on the other opportunity views*@
</div>

<script type="text/javascript">
    function addSelectedMajor() {
        var selectlist = document.getElementById("Majors");
        var option = selectlist.options[selectlist.selectedIndex];

        if (option.value) {
            var majorlist = $("ol");
            var li = document.createElement("li");
            var newele = "";
            var id = option.value;

            li.value = id;
            li.innerText = option.text;
            li.style = "display: inline-block;";

            newele = '<div id="' + id + '">\n';
            newele += '<button type="button" onclick="removeMajor(' + id + ');">X</button> ';
            newele += '<li style="display:inline-block;" value="' + id + '">' + option.text + '</li>\n';
            newele += '<br />';
            newele += '</div>';

            majorlist.append(newele);

            selectlist.remove(selectlist.selectedIndex);

            addListValueToForm(li);
        }
    }

    function removeMajor(id) {
        var majorDivs = $("ol div");
        var hiddenFields = document.getElementsByName("MajorIDs");

        for (var i = 0; i < majorDivs.length; i++) {
            if (majorDivs[i].id == id) {
                var div = majorDivs[i];
                var major = div.children[1];
                var option = document.createElement("option");
                option.value = id;
                option.innerText = major.innerText;

                var selectlist = document.getElementById("Majors");
                selectlist.appendChild(option);

                div.remove();
                break;
            }
        }

        for (var i = 0; i < hiddenFields.length; i++) {
            if (hiddenFields[i].value == id) {
                hiddenFields[i].remove();
                break;
            }
        }
    }

    function addCurrentMajors() {
        var majors = $("ol li");

        for (var i = 0; i < majors.length; i++) {
            addListValueToForm(majors[i]);
        }
    }

    function addListValueToForm(item) {
        var form = $("form"),
            majorid = item.value;

        form.append('<input type="hidden" name="MajorIDs" value="' + majorid + '" />')
    }

    function getMajorsForDepartment(deptlist) {
        var id = deptlist.options[deptlist.selectedIndex].value;
        var topOption = document.getElementById("top-opt");
        var majorSelect = document.getElementById("Majors");
        var mlen = majorSelect.length;
        var curMajors = document.getElementsByName("MajorIDs");
        var inList = false;

        for (var i = 0; i < mlen - 1; i++) {
                majorSelect.remove(1);
        }


        if (id) {
            topOption.innerText = "Loading...";

            $.post("/coop/getmajorsfordepartment", { id: id }, function (majors) {
                for (var i = 0; i < majors.length; i++) {
                    for (var j = 0; j < curMajors.length; j++) {
                        if (curMajors[j].value == majors[i].MajorID)
                            inList = true;
                    }

                    if (!inList) {
                        var option = document.createElement("option");
                        option.value = majors[i].MajorID;
                        option.innerText = majors[i].MajorName;

                        majorSelect.appendChild(option);
                    }
                    inList = false;
                }

                topOption.innerText = "Select One to Add";
            })
            .fail(function () {
                topOption.innerText = "Failed to get Majors";
            });
        }
        else {
            topOption.innerText = "Choose a Department first";
        }
    }

    window.onload = function () {
        addCurrentMajors();
        var deptSelect = document.getElementById("DepartmentIDs");
        deptSelect.setAttribute("onchange", "getMajorsForDepartment(this);")
        getMajorsForDepartment(deptSelect);
    }
</script>